import { FactoryProvider, ElementRef } from '@angular/core';
import { UniversalService            } from '@bespunky/angular-zen/universal';

import { GoogleMapsApiService        } from '../../api/google-maps-api.service';
import { Native                      } from '../types/abstraction';
import { NativeInstance              } from './tokens';

type NativeFactory<TNative  extends Native> = (element: ElementRef, ...deps: any[]) => TNative;

/**
 * Creates the factory that will be used in the provider created by `createNativeFactoryProvider`.
 * See `createNativeFactoryProvider` for more details.
 *
 * @template TNative The type of native object generated by the factory.
 * @param {NativeFactory<TNative>} produceNative The function that will create the native object. Receives the current element for which the object is injected and the dependencies specified in `deps`.
 * @returns A factory that receives the `GoogleMapsApiService`, `UniversalService`, and the current element along with any additional dependencies, then returns a new native object on browsers and null on non-browsers.
 */
function createNativeFactory<TNative extends Native>(produceNative: NativeFactory<TNative>)
{
    // Called by Angular's Dependency Injector
    return (api: GoogleMapsApiService, universal: UniversalService, element: ElementRef, ...deps: any[]) =>
    {
        // TODO: Test with Angular Universal app and see if this doesn't break the chain of contained directives
        if (!universal.isPlatformBrowser) return null;

        return api.runOutsideAngular(() => produceNative(element, ...deps));
    };
}

/**
 * Creates a factory provider for the `NativeInstance` token.
 * The factory runs the specified function and passes it the current element and the specified dependencies.
 * The function will be run outside Angular.
 * 
 * Note: The factory will detect non-browser platforms and return `null` instead of calling the function.
 *
 * @export
 * @template TNative The type of native object generated by the factory.
 * @param {NativeFactory<TNative>} produceNative The function that will create the native object. Receives the current element for which the object is injected and the dependencies specified in `deps`.
 * @param {any[]} [deps=[]] (Optional) Any additional dependencies required by the `produceNative` function to create the native object.
 * @returns {FactoryProvider} A `FactoryProvider` that returns a new native object on browser platforms for the `NativeInstance` token.
 */
export function createNativeFactoryProvider<TNative extends Native>(produceNative: NativeFactory<TNative>, deps: any[] = []): FactoryProvider
{
    return {
        provide   : NativeInstance,
        useFactory: createNativeFactory(produceNative),
        deps      : [GoogleMapsApiService, UniversalService, ElementRef, ...deps]
    };
}
