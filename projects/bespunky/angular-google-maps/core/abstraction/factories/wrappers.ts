import { FactoryProvider                 } from '@angular/core';
import { UniversalService                } from '@bespunky/angular-zen/universal';

import { GoogleMapsApiService            } from '../../api/google-maps-api.service';
import { NativeOf, Wrapper               } from '../types/abstraction';
import { NativeInstance, WrapperInstance } from './tokens';

type WrapperFactory<TWrapper extends Wrapper> = (api: GoogleMapsApiService, native: NativeOf<TWrapper>, ...deps: any[]) => TWrapper;

/**
 * Creates the factory that will be used in the provider created by `createWrapperFactoryProvider`.
 * See `createWrapperFactoryProvider` for more details.
 *
 * @template TWrapper The type of wrapper generated by the factory.
 * @param {WrapperFactory<TWrapper>} produceWrapper The function that will create the wrapper object. Receives the `GoogleMapsApiService`, the native object and the dependencies specified in `deps`.
 * @returns A factory that receives the `GoogleMapsApiService`, `UniversalService`, and the native object to wrap along with any additional dependencies, then returns a new wrapper object on browsers and null on non-browsers.
 */
function createWrapperFactory<TWrapper extends Wrapper>(produceWrapper: WrapperFactory<TWrapper>)
{
    // Called by Angular's Dependency Injector
    return (api: GoogleMapsApiService, universal: UniversalService, native: NativeOf<TWrapper>, ...deps: any[]) =>
    {
        // TODO: Test with Angular Universal app and see if this doesn't break the chain of contained directives
        if (!universal.isPlatformBrowser) return null;
            
        return produceWrapper(api, native, ...deps);
    };
}

/**
 * Creates a factory provider for the `WrapperInstance` token.
 * The factory runs the specified function and passes it the `GoogleMapsApiService`, the native object to be wrapped and the specified dependencies.
 * 
 * Note: The factory will detect non-browser platforms and return `null` instead of calling the function.
 *
 * @export
 * @template TWrapper The type of wrapper generated by the factory.
 * @param {WrapperFactory<TWrapper>} produceWrapper The function that will create the wrapper object. Receives the `GoogleMapsApiService`, the native object and the dependencies specified in `deps`.
 * @param {any[]} [deps=[]] (Optional) Any additional dependencies required by the `produceNative` function to create the native object.
 * @returns {FactoryProvider} A `FactoryProvider` that returns a new wrapper object on browser platforms for the `WrapperInstance` token.
 */
export function createWrapperFactoryProvider<TWrapper extends Wrapper>(produceWrapper: WrapperFactory<TWrapper>, deps: any[] = []): FactoryProvider
{
    return {
        provide   : WrapperInstance,
        useFactory: createWrapperFactory(produceWrapper),
        deps      : [GoogleMapsApiService, UniversalService, NativeInstance, ...deps]
    };
}
